name: ReleaseSubmodule

# 1. updates the version in the module manifest
# 2. creates a release with the new version number
# 3. triggers the update action inside the main repo

permissions:
  contents: write
on:
  workflow_dispatch:
  pull_request:
    branches: [main]
    types: [closed]

jobs:
  update_and_release:
    # Skip if the merged PR was not a release PR (no version increase)
    if: github.event_name == 'workflow_dispatch' || (github.event.pull_request.merged && (contains(github.event.pull_request.labels.*.name, 'version:MAJOR') || contains(github.event.pull_request.labels.*.name, 'version:MINOR') || contains(github.event.pull_request.labels.*.name, 'version:PATCH')))

    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main
      - run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@users.noreply.github.com"

      # Loads details from the latest valid PR
      # When triggered by merge: Gets data from the PR that triggered the event
      # When triggered manually: Gets data from most recently merged PR
      - name: Get PR details
        id: get_labels
        run: |
          if($IS_PR_EVENT) {
            $labels = "${{ join(github.event.pull_request.labels.*.name,  ', ') }}"
          } else {
            # get the labels from the latest merged release PR
            $latestPRs = gh pr list --base main --state merged --json labels,mergedAt --limit 10 | ConvertFrom-JSON

            $latestReleasePR = $latestPRs | Where-Object {
              $_.labels.name -match 'version:MAJOR' -or
              $_.labels.name -match 'version:MINOR' -or
              $_.labels.name -match 'version:PATCH'
            } | Sort-Object -Property mergedAt -Descending | Select-Object -First 1
            $labels = $latestReleasePR.labels.name -join ', '
          }
          Write-Output "LABELS=$labels" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_JSON: ${{ toJson(github.event.pull_request) }}
          IS_PR_EVENT: ${{github.event_name != 'workflow_dispatch'}}

      - name: Get Version Impact from label
        id: get_versionchange
        run: |
          # Labels can come in like: "version:MAJOR, version:MINOR, somelabel"
          switch ($LABELS)
          {
            { $_ -match "version:MAJOR" } { $impact = "major" }
            { $_ -match "version:MINOR" } { $impact = "minor" }
            default { $impact = "patch" }
          }
          Write-Output "IMPACT=$impact" >> $env:GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IS_PR_EVENT: ${{github.event_name != 'workflow_dispatch'}}
          LABELS: ${{ steps.get_labels.outputs.LABELS }}

      - name: Update Version
        id: update_version
        run: |
          # Load Update-PSManifestVersion <MANIFEST_FILE> <IMPACT> | returns new version
          Invoke-Expression (Invoke-RestMethod -Uri https://raw.githubusercontent.com/wookiefriseur/valor-modulis/main/.scripts/updatePSManifest.ps1)
          $manifestFile = $(Get-ChildItem *.psd1 -Recurse | Select-Object -First 1).FullName
          $newVersion = Update-PSManifestVersion $manifestFile $env:IMPACT
          Write-Output "VERSION=$newVersion" >> $env:GITHUB_OUTPUT
        env:
          IMPACT: ${{ steps.get_versionchange.outputs.IMPACT }}

      - name: Update files
        run: |
          git add .
          git commit -m "bump to $env:VERSION"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.update_version.outputs.VERSION }}

      - name: Create Release
        run: |
          gh release create "${{ steps.update_version.outputs.VERSION }}" `
           --title "Version ${{ steps.update_version.outputs.VERSION }}" `
           --target main `
           --generate-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Trigger update in main repo
        run: |
          gh workflow run proxy_update_submodule_refs.yml `
          --repo wookiefriseur/valor-modulis
        env:
          GITHUB_TOKEN: ${{ secrets.VM_ACTIONS }}
